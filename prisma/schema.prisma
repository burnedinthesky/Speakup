// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgres"
    url      = env("DATABASE_URL")
}

model User {
    id                String                     @id @unique @default(uuid())
    username          String                     @unique
    password          String
    email             String                     @unique
    profileImg        String                     @default("")
    birthday          String?
    gender            Int?
    role              Role                       @default(USER)
    Articles          Articles[]
    Comments          Comments[]
    likedComments     LikedUsersOnComments[]
    dislikedComments  DislikedUsersOnComments[]
    supportedComments SupportedUsersOnComments[]
}

model Articles {
    id          String   @id @default(cuid())
    title       String   @unique
    tags        String[]
    createdTime DateTime @default(now())
    author      User     @relation(fields: [authorId], references: [id])
    authorId    String
    viewCount   Int      @default(0)
    content     Json
    references  Json
    thread      Threads  @relation(fields: [threadId], references: [id])
    threadId    Int      @unique
}

model Threads {
    id       Int        @id @default(autoincrement())
    comments Comments[]
    article  Articles?
}

model Comments {
    id             Int                        @id @default(autoincrement())
    content        String                     @db.Text
    owner          User                       @relation(fields: [ownerId], references: [id])
    ownerId        String
    createdTime    DateTime                   @default(now())
    thread         Threads[]
    stance         String                     @db.VarChar(3)
    likedUsers     LikedUsersOnComments[]
    dislikedUsers  DislikedUsersOnComments[]
    supportedUsers SupportedUsersOnComments[]
}

// model ThreadsOnComments {
//     thread    Threads  @relation(fields: [threadId], references: [id])
//     threadId  Int
//     comments  Comments @relation(fields: [commentId], references: [id])
//     commentId Int

//     @@unique([threadId, commentId])
// }

model LikedUsersOnComments {
    User       User     @relation(fields: [userId], references: [id])
    userId     String
    comment    Comments @relation(fields: [commentsId], references: [id])
    commentsId Int

    @@id([commentsId, userId])
}

model DislikedUsersOnComments {
    User       User     @relation(fields: [userId], references: [id])
    userId     String
    Comments   Comments @relation(fields: [commentsId], references: [id])
    commentsId Int

    @@id([commentsId, userId])
}

model SupportedUsersOnComments {
    User       User     @relation(fields: [userId], references: [id])
    userId     String
    Comments   Comments @relation(fields: [commentsId], references: [id])
    commentsId Int

    @@id([commentsId, userId])
}

enum Role {
    USER
    CREATOR
    SENIORCREATOR
    ADMIN
}
