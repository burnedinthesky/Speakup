generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgres"
    url      = env("DATABASE_URL")
}

enum UserRole {
    USER
    ADVOCATE
    SENIOR_ADVOCATE
    ADMIN
}

// https://next-auth.js.org/adapters/models

// Auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model CredEmailLimiter {
    id              Int      @id @default(autoincrement())
    user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId          String   @unique
    lastEmailSent   DateTime @default(now())
    dayStartTime    DateTime @default(now())
    emailsSentInDay Int      @default(0)
}

model CredEmailVerToken {
    id          String   @id @default(cuid())
    valToken    String
    failedCount Int      @default(0)
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId      String   @unique
    expiers     DateTime
}

enum Gender {
    m
    f
    o
}

// User

model User {
    id            String    @id @unique @default(uuid())
    name          String    @unique
    email         String    @unique
    emailVerified DateTime?
    password      String?   @db.Char(64)

    profileImg String?
    birthday   DateTime?
    gender     Gender?
    role       UserRole  @default(USER)
    onBoarded  Boolean   @default(false)

    tagPreference Json @default("[{\"slug\": \"ent\", \"pref\": 0.1}, {\"slug\": \"env\", \"pref\": 0.1}, {\"slug\": \"jus\", \"pref\": 0.1}, {\"slug\": \"cnd\", \"pref\": 0.1}, {\"slug\": \"eco\", \"pref\": 0.1}, {\"slug\": \"min\", \"pref\": 0.1}, {\"slug\": \"mda\", \"pref\": 0.1}, {\"slug\": \"med\", \"pref\": 0.1}, {\"slug\": \"eth\", \"pref\": 0.1}, {\"slug\": \"pol\", \"pref\": 0.1}, {\"slug\": \"edu\", \"pref\": 0.1}, {\"slug\": \"fam\", \"pref\": 0.1}, {\"slug\": \"fem\", \"pref\": 0.1}, {\"slug\": \"lib\", \"pref\": 0.1}, {\"slug\": \"rel\", \"pref\": 0.1}, {\"slug\": \"tec\", \"pref\": 0.1}, {\"slug\": \"plc\", \"pref\": 0.1}, {\"slug\": \"scm\", \"pref\": 0.1}, {\"slug\": \"spr\", \"pref\": 0.1}]")

    accounts Account[]
    sessions Session[]

    articles  Articles[]
    arguments Argument[] @relation("postedArguments")
    comments  Comments[] @relation("postedComments")

    likedArguments     Argument[] @relation("likedArguments")
    dislikedArguments  Argument[] @relation("supportedArguments")
    supportedArguments Argument[] @relation("dislikedArguments")

    likedComments     Comments[] @relation("likedComments")
    dislikedComments  Comments[] @relation("supportedComments")
    supportedComments Comments[] @relation("dislikedComments")

    privateUser       PrivateUser?
    articleViews      ArticleViews[]
    collections       Collections[]
    collectionSet     CollectionSet[]
    credEmailVerToken CredEmailVerToken?
    credEmailLimiter  CredEmailLimiter?
    argumentReports   ArgumentReports[]
    commentReports    CommentReports[]
    articleReports    ArticleReports[]
}

enum PrivateUserRole {
    USER
    SYSTEMADMIN
}

model PrivateUser {
    id           String @id @unique @default(uuid())
    UserInstance User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId       String @unique

    role      PrivateUserRole @default(USER)
    authToken String?         @unique @db.VarChar(64)
}

model CollectionSet {
    id          Int           @id @unique @default(autoincrement())
    user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId      String
    name        String
    collections Collections[]
    createdTime DateTime      @default(now())
}

model Collections {
    id             Int             @id @unique @default(autoincrement())
    user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId         String
    article        Articles        @relation(fields: [articleId], references: [id])
    articleId      String
    collectionSets CollectionSet[]
    createdTime    DateTime        @default(now())

    @@unique([articleId, userId])
}

model Articles {
    id String @id @default(cuid())

    title String   @unique
    tags  String[]

    author   User   @relation(fields: [authorId], references: [id])
    authorId String

    brief      String
    content    Json
    references ArticleReferences[]

    arguments      Argument[]
    collections    Collections[]
    articleReports ArticleReports[]

    createdTime  DateTime @default(now())
    viewCount    Int      @default(0)
    articleScore Float    @default(20)
    status       Json     @default("{\"status\": \"pending_mod\", \"desc\": \"正在等候審核\"}")
}

model ArticleViews {
    id     BigInt  @id @default(autoincrement())
    ip     String?
    user   User?   @relation(fields: [userId], references: [id])
    userId String?

    @@unique([ip, userId])
}

model ArticleReferences {
    id          BigInt   @id @default(autoincrement())
    link        String
    title       String
    description String
    img         String
    Articles    Articles @relation(fields: [articlesId], references: [id])
    articlesId  String
}

model ArticleReports {
    id          Int      @id @default(autoincrement())
    reasons     String[]
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    article     Articles @relation(fields: [articlesId], references: [id], onDelete: Cascade)
    createdTime DateTime @default(now())
    userId      String
    articlesId  String

    @@unique([userId, articlesId])
}

model Argument {
    id             Int      @id @default(autoincrement())
    content        String   @db.Text
    author         User     @relation("postedArguments", fields: [authorId], references: [id], onDelete: Cascade)
    authorId       String
    createdTime    DateTime @default(now())
    stance         String   @db.Text
    likedUsers     User[]   @relation("likedArguments")
    dislikedUsers  User[]   @relation("supportedArguments")
    supportedUsers User[]   @relation("dislikedArguments")

    pagnationSequence Int @unique @default(autoincrement())

    article   Articles @relation(fields: [articleId], references: [id], onDelete: Cascade)
    articleId String

    comments        Comments[]
    argumentThreads ArgumentThread[]
    argumentReports ArgumentReports[]
}

model ArgumentThread {
    id         Int        @id @default(autoincrement())
    name       String
    argument   Argument   @relation(fields: [argumentId], references: [id], onDelete: Cascade)
    argumentId Int
    comments   Comments[]

    @@unique([argumentId, name])
}

model ArgumentReports {
    id          Int      @id @default(autoincrement())
    reasons     String[]
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    argument    Argument @relation(fields: [argumentId], references: [id], onDelete: Cascade)
    createdTime DateTime @default(now())
    userId      String
    argumentId  Int

    @@unique([userId, argumentId])
}

model Comments {
    id             Int      @id @default(autoincrement())
    content        String   @db.Text
    author         User     @relation("postedComments", fields: [authorId], references: [id], onDelete: Cascade)
    authorId       String
    createdTime    DateTime @default(now())
    stance         String   @db.Text
    likedUsers     User[]   @relation("likedComments")
    dislikedUsers  User[]   @relation("supportedComments")
    supportedUsers User[]   @relation("dislikedComments")

    inArgument       Argument         @relation(fields: [inArgumentId], references: [id], onDelete: Cascade)
    inArgumentId     Int
    inThread         ArgumentThread?  @relation(fields: [argumentThreadId], references: [id])
    argumentThreadId Int?
    commentReports   CommentReports[]
}

model CommentReports {
    id          Int      @id @default(autoincrement())
    reasons     String[]
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    comment     Comments @relation(fields: [commentsId], references: [id], onDelete: Cascade)
    createdTime DateTime @default(now())
    userId      String
    commentsId  Int

    @@unique([userId, commentsId])
}
