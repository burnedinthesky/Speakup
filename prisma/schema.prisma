// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgres"
    url      = env("DATABASE_URL")
}

model User {
    id                String                     @id @unique @default(uuid())
    username          String                     @unique
    password          String
    email             String                     @unique
    profileImg        String                     @default("")
    birthday          String?
    gender            Int?
    role              Role                       @default(USER)
    Articles          Articles[]
    Comments          Comments[]
    likedComments     LikedUsersOnComments[]
    dislikedComments  DislikedUsersOnComments[]
    supportedComments SupportedUsersOnComments[]
}

model Articles {
    id            String      @id @default(cuid())
    title         String      @unique
    tags          String[]
    createdTime   DateTime    @default(now())
    author        User        @relation(fields: [authorId], references: [id])
    authorId      String
    viewCount     Int         @default(0)
    content       Json
    references    Json
    threadGroup   ThreadGroup @relation(fields: [threadGroupId], references: [id], onDelete: Cascade)
    threadGroupId Int         @unique
}

model ThreadGroup {
    id       Int       @id @default(autoincrement())
    threads  Threads[]
    Articles Articles?
}

model Threads {
    id                Int         @id @default(autoincrement())
    threadGroup       ThreadGroup @relation(fields: [threadGroupId], references: [id])
    threadGroupId     Int
    pagnationSequence Int         @unique @default(autoincrement())

    leadComment   Comments   @relation(name: "leadingThread", fields: [leadCommentId], references: [id])
    leadCommentId Int        @unique
    comments      Comments[]
}

model Comments {
    id             Int                        @id @default(autoincrement())
    content        String                     @db.Text
    owner          User                       @relation(fields: [ownerId], references: [id])
    ownerId        String
    createdTime    DateTime                   @default(now())
    stance         String                     @db.VarChar(3)
    likedUsers     LikedUsersOnComments[]
    dislikedUsers  DislikedUsersOnComments[]
    supportedUsers SupportedUsersOnComments[]

    leadingThread Threads? @relation(name: "leadingThread")
    threads       Threads? @relation(fields: [threadsId], references: [id], onDelete: Cascade)
    threadsId     Int?
}

model LikedUsersOnComments {
    User       User     @relation(fields: [userId], references: [id])
    userId     String
    comment    Comments @relation(fields: [commentsId], references: [id])
    commentsId Int

    @@id([commentsId, userId])
}

model DislikedUsersOnComments {
    User       User     @relation(fields: [userId], references: [id])
    userId     String
    Comments   Comments @relation(fields: [commentsId], references: [id])
    commentsId Int

    @@id([commentsId, userId])
}

model SupportedUsersOnComments {
    User       User     @relation(fields: [userId], references: [id])
    userId     String
    Comments   Comments @relation(fields: [commentsId], references: [id])
    commentsId Int

    @@id([commentsId, userId])
}

enum Role {
    USER
    CREATOR
    SENIORCREATOR
    ADMIN
}
