// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgres"
    url      = env("DATABASE_URL")
}

model User {
    id         String  @id @unique @default(uuid())
    username   String  @unique
    password   String
    email      String  @unique
    profileImg String  @default("")
    birthday   String?
    gender     Int?
    role       Role    @default(USER)

    Articles  Articles[]
    Arguments Argument[] @relation("postedArguments")
    Comments  Comments[] @relation("postedComments")

    likedArguments     Argument[] @relation("likedArguments")
    dislikedArguments  Argument[] @relation("supportedArguments")
    supportedArguments Argument[] @relation("dislikedArguments")

    likedComments     Comments[] @relation("likedComments")
    dislikedComments  Comments[] @relation("supportedComments")
    supportedComments Comments[] @relation("dislikedComments")
}

model Articles {
    id          String     @id @default(cuid())
    title       String     @unique
    tags        String[]
    createdTime DateTime   @default(now())
    author      User       @relation(fields: [authorId], references: [id])
    authorId    String
    viewCount   Int        @default(0)
    content     Json
    references  Json
    arguments   Argument[]
}

model Argument {
    id             Int      @id @default(autoincrement())
    content        String   @db.Text
    author         User     @relation("postedArguments", fields: [authorId], references: [id])
    authorId       String
    createdTime    DateTime @default(now())
    stance         String   @db.Text
    likedUsers     User[]   @relation("likedArguments")
    dislikedUsers  User[]   @relation("supportedArguments")
    supportedUsers User[]   @relation("dislikedArguments")

    pagnationSequence Int @unique @default(autoincrement())

    article   Articles @relation(fields: [articleId], references: [id])
    articleId String

    comments        Comments[]
    argumentThreads ArgumentThread[]
}

model ArgumentThread {
    id         Int        @id @default(autoincrement())
    name       String
    argument   Argument   @relation(fields: [argumentId], references: [id])
    argumentId Int
    comments   Comments[]

    @@unique([argumentId, name])
}

model Comments {
    id             Int      @id @default(autoincrement())
    content        String   @db.Text
    author         User     @relation("postedComments", fields: [authorId], references: [id])
    authorId       String
    createdTime    DateTime @default(now())
    stance         String   @db.Text
    likedUsers     User[]   @relation("likedComments")
    dislikedUsers  User[]   @relation("supportedComments")
    supportedUsers User[]   @relation("dislikedComments")

    inArgument       Argument        @relation(fields: [inArgumentId], references: [id], onDelete: Cascade)
    inArgumentId     Int
    inThread         ArgumentThread? @relation(fields: [argumentThreadId], references: [id])
    argumentThreadId Int?
}

enum Role {
    USER
    CREATOR
    SENIORCREATOR
    ADMIN
}
