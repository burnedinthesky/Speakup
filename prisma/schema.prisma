// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgres"
    url      = env("DATABASE_URL")
}

model User {
    id                String                     @id @unique @default(uuid())
    username          String                     @unique
    password          String
    email             String                     @unique
    birthday          String?
    gender            Int?
    role              Role                       @default(USER)
    Articles          Articles[]
    Comments          Comments[]
    CommentReply      CommentReply[]
    likedComments     LikedUsersOnComments[]
    dislikedComments  DislikedUsersOnComments[]
    supportedComments SupportedUsersOnComments[]
}

model Articles {
    id          String     @id @default(uuid())
    h1          String
    h2          String
    h3          String
    spoiler     String     @db.Text
    content     String     @db.Text
    tags        String[]
    createdTime DateTime   @default(now())
    author      User       @relation(fields: [authorId], references: [id])
    authorId    String
    Comments    Comments[]
}

model Comments {
    id             Int                        @id @default(autoincrement())
    content        String                     @db.Text
    owner          User                       @relation(fields: [ownerId], references: [id])
    ownerId        String
    createdTime    DateTime                   @default(now())
    article        Articles                   @relation(fields: [articleId], references: [id])
    articleId      String
    onside         String
    likedUsers     LikedUsersOnComments[]
    dislikedUsers  DislikedUsersOnComments[]
    supportedUsers SupportedUsersOnComments[]
    CommentReply   CommentReply[]
}

model LikedUsersOnComments {
    User       User     @relation(fields: [userId], references: [id])
    userId     String
    comment    Comments @relation(fields: [commentsId], references: [id])
    commentsId Int

    @@id([commentsId, userId])
}

model DislikedUsersOnComments {
    User       User     @relation(fields: [userId], references: [id])
    userId     String
    Comments   Comments @relation(fields: [commentsId], references: [id])
    commentsId Int

    @@id([commentsId, userId])
}

model SupportedUsersOnComments {
    User       User     @relation(fields: [userId], references: [id])
    userId     String
    Comments   Comments @relation(fields: [commentsId], references: [id])
    commentsId Int

    @@id([commentsId, userId])
}

model CommentReply {
    id              Int      @id @default(autoincrement())
    content         String   @db.Text
    owner           User     @relation(fields: [ownerId], references: [id])
    ownerId         String
    createdTime     DateTime @default(now())
    motherComment   Comments @relation(fields: [motherCommentId], references: [id])
    motherCommentId Int
}

enum Role {
    USER
    CREATOR
    SENIORCREATOR
    ADMIN
}
